---
import { ManagerProvider as ManagerProviderContext } from "./ManagerProviderContext";
import { createServicesManager, createServicesMap } from '@wix/services-manager';
import type { ServiceDefinition, ServiceFactory } from "@wix/services-definitions";

type ServiceToAdd = {
  definition: ServiceDefinition<any, any>,
  service: ServiceFactory<any, any>,
  initialState: any,
};
const servicesToAdd : ServiceToAdd[] = Astro.props.servicesToAdd;
console.log("ManagerProvider::servicesToAdd", servicesToAdd);
const map = servicesToAdd.reduce((acc, serviceToAdd) => acc.addService(serviceToAdd.definition, serviceToAdd.service, serviceToAdd.initialState), createServicesMap());

const mgr = createServicesManager(map);
---

<ManagerProviderContext manager={mgr}>
  <context-provider data-intial-data={JSON.stringify(Astro.props.servicesToAdd)}>
    <slot />
  </context-provider>
</ManagerProviderContext>
<script>
  import { createServicesManager, createServicesMap } from '@wix/services-manager';
  import type { ServiceDefinition, ServiceFactory } from "@wix/services-definitions";

  type ServiceToAdd = {
    definition: ServiceDefinition<any, any>,
    service: ServiceFactory<any, any>, // This is not serializable, so need to figure out how we load it.
    initialState: any,
  };

  function resolveImplementation(definition: ServiceDefinition<any, any>) {
    if ((globalThis as any).ServicesRepository[definition]) {
      return (globalThis as any).ServicesRepository[definition];
    }
    return null;
  }

  class ContextProvider extends HTMLElement {
    manager: ReturnType<typeof createServicesManager>;
    constructor() {
      super();
      console.log("ManagerProvider ContextProvider::constructor", this.getAttribute("data-intial-data"));
      const servicesToAdd = JSON.parse(this.getAttribute("data-intial-data")!);

      const map = servicesToAdd.reduce(
        (acc: ReturnType<typeof createServicesMap>, serviceToAdd: ServiceToAdd) =>
          acc.addService(serviceToAdd.definition, resolveImplementation(serviceToAdd.definition)!, serviceToAdd.initialState),
        createServicesMap()
      );

      this.manager = createServicesManager(map);
      (globalThis as any).runDirectivePendingTaks && (globalThis as any).runDirectivePendingTaks();
    }

  }

  customElements.define("context-provider", ContextProvider);
</script>









<!--


<ManagerProvider factories={
  currentCartServiceDefinition,
}>
  <BuiyNo>
    <AdditionalProvider factories={
      productGalleryServiceDefinition,
      variantServiceDefinition,
    } />
    <Product></Product>
  </BuiyNo>
</ManagerProvider>

 -->
