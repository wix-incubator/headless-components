---
import BaseLayout from '../../layouts/BaseLayout.astro';
import StoreCollectionPage from '../../react-pages/category/index';
import { loadCollectionServiceConfig } from '@wix/headless-stores/services';
import { loadCurrentCartServiceConfig } from '@wix/headless-ecom/services';
import { loadCategoriesConfig } from '@wix/headless-stores/services';
import { loadSEOTagsServiceConfig } from '@wix/headless-seo/services';
import { SEO } from '@wix/headless-seo/react';

// Get category slug from URL params
const { categorySlug } = Astro.params;

// Load categories and cart config in parallel (cart is independent)
const [categoriesConfig, currentCartServiceConfig] = await Promise.all([
  loadCategoriesConfig(),
  loadCurrentCartServiceConfig(),
]);

// Find category by its real slug
const selectedCategory = categoriesConfig.categories.find(
  (cat: any) => cat.slug === categorySlug
);

// Load collection config with selected category (pass pre-loaded categories)
const filteredCollectionServiceConfig = await loadCollectionServiceConfig(
  selectedCategory?._id || undefined,
  Astro.url.searchParams,
  categoriesConfig.categories
);

// If category not found, return 404
if (!selectedCategory) {
  return Astro.redirect('/404');
}

// TODO: check why the API returns a 400 for STORES_CATEGORY item (working in fireconsole)
// const seoTagsServiceConfig = await loadSEOTagsServiceConfig({
//   pageUrl: Astro.url.href,
//   itemType: seoTags.ItemType.STORES_CATEGORY,
//   itemData: {
//     slug: categorySlug,
//   },
// });

const categoryName = selectedCategory?.name || '';
const seoTagsServiceConfig = await loadSEOTagsServiceConfig({
  pageUrl: Astro.url.href,
  itemData: {
    pageName: categoryName,
    seoData: {
      tags: [
        {
          type: 'title',
          children: `${categoryName} - Store`,
        },
        {
          type: 'meta',
          props: {
            content: `Browse our ${categoryName} products`,
            name: 'description',
          },
        },
      ],
    },
  },
});
---

<BaseLayout>
  <SEO.Tags seoTagsServiceConfig={seoTagsServiceConfig} slot="seo-tags" />
  <StoreCollectionPage
    client:load
    filteredCollectionServiceConfig={filteredCollectionServiceConfig}
    currentCartServiceConfig={currentCartServiceConfig}
    categoriesConfig={{
      ...categoriesConfig,
      initialCategoryId: selectedCategory._id,
    }}
    slot="body"
  />
</BaseLayout>
